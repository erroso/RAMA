/**
 */
package mmclass.provider;

import java.util.ArrayList;
import java.util.Collection;

import mmclass.util.MmclassAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MmclassItemProviderAdapterFactory extends MmclassAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MmclassItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link mmclass.MindMapModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MindMapModelItemProvider mindMapModelItemProvider;

  /**
   * This creates an adapter for a {@link mmclass.MindMapModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMindMapModelAdapter()
  {
    if (mindMapModelItemProvider == null)
    {
      mindMapModelItemProvider = new MindMapModelItemProvider(this);
    }

    return mindMapModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmclass.Edge} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EdgeItemProvider edgeItemProvider;

  /**
   * This creates an adapter for a {@link mmclass.Edge}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEdgeAdapter()
  {
    if (edgeItemProvider == null)
    {
      edgeItemProvider = new EdgeItemProvider(this);
    }

    return edgeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmclass.Node} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeItemProvider nodeItemProvider;

  /**
   * This creates an adapter for a {@link mmclass.Node}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNodeAdapter()
  {
    if (nodeItemProvider == null)
    {
      nodeItemProvider = new NodeItemProvider(this);
    }

    return nodeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmclass.Attribute} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributeItemProvider attributeItemProvider;

  /**
   * This creates an adapter for a {@link mmclass.Attribute}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAttributeAdapter()
  {
    if (attributeItemProvider == null)
    {
      attributeItemProvider = new AttributeItemProvider(this);
    }

    return attributeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmclass.RootNode} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RootNodeItemProvider rootNodeItemProvider;

  /**
   * This creates an adapter for a {@link mmclass.RootNode}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRootNodeAdapter()
  {
    if (rootNodeItemProvider == null)
    {
      rootNodeItemProvider = new RootNodeItemProvider(this);
    }

    return rootNodeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmclass.FloatNode} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FloatNodeItemProvider floatNodeItemProvider;

  /**
   * This creates an adapter for a {@link mmclass.FloatNode}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFloatNodeAdapter()
  {
    if (floatNodeItemProvider == null)
    {
      floatNodeItemProvider = new FloatNodeItemProvider(this);
    }

    return floatNodeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmclass.Enum} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnumItemProvider enumItemProvider;

  /**
   * This creates an adapter for a {@link mmclass.Enum}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEnumAdapter()
  {
    if (enumItemProvider == null)
    {
      enumItemProvider = new EnumItemProvider(this);
    }

    return enumItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmclass.Constant} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstantItemProvider constantItemProvider;

  /**
   * This creates an adapter for a {@link mmclass.Constant}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConstantAdapter()
  {
    if (constantItemProvider == null)
    {
      constantItemProvider = new ConstantItemProvider(this);
    }

    return constantItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmclass.Entity} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityItemProvider entityItemProvider;

  /**
   * This creates an adapter for a {@link mmclass.Entity}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEntityAdapter()
  {
    if (entityItemProvider == null)
    {
      entityItemProvider = new EntityItemProvider(this);
    }

    return entityItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmclass.AssociationEntity} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssociationEntityItemProvider associationEntityItemProvider;

  /**
   * This creates an adapter for a {@link mmclass.AssociationEntity}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAssociationEntityAdapter()
  {
    if (associationEntityItemProvider == null)
    {
      associationEntityItemProvider = new AssociationEntityItemProvider(this);
    }

    return associationEntityItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (mindMapModelItemProvider != null) mindMapModelItemProvider.dispose();
    if (edgeItemProvider != null) edgeItemProvider.dispose();
    if (nodeItemProvider != null) nodeItemProvider.dispose();
    if (attributeItemProvider != null) attributeItemProvider.dispose();
    if (rootNodeItemProvider != null) rootNodeItemProvider.dispose();
    if (floatNodeItemProvider != null) floatNodeItemProvider.dispose();
    if (enumItemProvider != null) enumItemProvider.dispose();
    if (constantItemProvider != null) constantItemProvider.dispose();
    if (entityItemProvider != null) entityItemProvider.dispose();
    if (associationEntityItemProvider != null) associationEntityItemProvider.dispose();
  }

}
