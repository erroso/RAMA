/**
 */
package mmbdd.provider;

import java.util.ArrayList;
import java.util.Collection;

import mmbdd.util.MmbddAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MmbddItemProviderAdapterFactory extends MmbddAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MmbddItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.MindMapModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MindMapModelItemProvider mindMapModelItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.MindMapModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMindMapModelAdapter()
  {
    if (mindMapModelItemProvider == null)
    {
      mindMapModelItemProvider = new MindMapModelItemProvider(this);
    }

    return mindMapModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Content} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContentItemProvider contentItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Content}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContentAdapter()
  {
    if (contentItemProvider == null)
    {
      contentItemProvider = new ContentItemProvider(this);
    }

    return contentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Edge} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EdgeItemProvider edgeItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Edge}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEdgeAdapter()
  {
    if (edgeItemProvider == null)
    {
      edgeItemProvider = new EdgeItemProvider(this);
    }

    return edgeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Node} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeItemProvider nodeItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Node}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNodeAdapter()
  {
    if (nodeItemProvider == null)
    {
      nodeItemProvider = new NodeItemProvider(this);
    }

    return nodeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Group} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GroupItemProvider groupItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Group}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGroupAdapter()
  {
    if (groupItemProvider == null)
    {
      groupItemProvider = new GroupItemProvider(this);
    }

    return groupItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Leaf} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LeafItemProvider leafItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Leaf}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLeafAdapter()
  {
    if (leafItemProvider == null)
    {
      leafItemProvider = new LeafItemProvider(this);
    }

    return leafItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Center} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CenterItemProvider centerItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Center}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCenterAdapter()
  {
    if (centerItemProvider == null)
    {
      centerItemProvider = new CenterItemProvider(this);
    }

    return centerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Relationship} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationshipItemProvider relationshipItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Relationship}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRelationshipAdapter()
  {
    if (relationshipItemProvider == null)
    {
      relationshipItemProvider = new RelationshipItemProvider(this);
    }

    return relationshipItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Notation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NotationItemProvider notationItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Notation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNotationAdapter()
  {
    if (notationItemProvider == null)
    {
      notationItemProvider = new NotationItemProvider(this);
    }

    return notationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Textual} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TextualItemProvider textualItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Textual}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTextualAdapter()
  {
    if (textualItemProvider == null)
    {
      textualItemProvider = new TextualItemProvider(this);
    }

    return textualItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Icon} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IconItemProvider iconItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Icon}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIconAdapter()
  {
    if (iconItemProvider == null)
    {
      iconItemProvider = new IconItemProvider(this);
    }

    return iconItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link mmbdd.Image} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImageItemProvider imageItemProvider;

  /**
   * This creates an adapter for a {@link mmbdd.Image}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createImageAdapter()
  {
    if (imageItemProvider == null)
    {
      imageItemProvider = new ImageItemProvider(this);
    }

    return imageItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (mindMapModelItemProvider != null) mindMapModelItemProvider.dispose();
    if (contentItemProvider != null) contentItemProvider.dispose();
    if (edgeItemProvider != null) edgeItemProvider.dispose();
    if (nodeItemProvider != null) nodeItemProvider.dispose();
    if (groupItemProvider != null) groupItemProvider.dispose();
    if (leafItemProvider != null) leafItemProvider.dispose();
    if (centerItemProvider != null) centerItemProvider.dispose();
    if (relationshipItemProvider != null) relationshipItemProvider.dispose();
    if (notationItemProvider != null) notationItemProvider.dispose();
    if (textualItemProvider != null) textualItemProvider.dispose();
    if (iconItemProvider != null) iconItemProvider.dispose();
    if (imageItemProvider != null) imageItemProvider.dispose();
  }

}
